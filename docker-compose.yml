# In our nginx service with pass to our build the args
# DOMAIN and FLASK so we can populate our nginx server
# config automatically. see nginx/Dockerfile

version: "3.2"

services:

  nginx:
    build:
      context: ./nginx
      args:
        # Pass the name of our Domain and Email from .env
        DOMAIN: ${DOMAIN}
        EMAIL: ${EMAIL}
        # Pass the name of our docker-compose service to avoid
        # having to modify it in Nginx if we want to change it.
        FLASK: application
    ports:
      - 80:80
      - 443:443
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - application
    restart: always     
    depends_on:
      - application
  
  application:
    # Load app folder fron our .env file (in this example: core).
    build: ./${APP_FOLDER}
    # Load flask app from our .env file.
    # If can be the app entrypoint (wsgi if using ./core/wsgi.py)
    # or the application package (as in this case) as the app's
    # configs are under ./core/flask_app/__init__.py
    command: gunicorn -c gunicorn_ini.py ${FLASK_APP}:app --reload
    volumes:
      - ./${APP_FOLDER}:/usr/src/app
    environment:
      # Load our flask environment from our .env file.
      - FLASK_ENV=${FLASK_ENV}
      - API_KEY=${API_KEY}
      # Pass the postgres stuff to the flask app for sqlalchemy
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      # Get the IEX stuff for iexfinance 
      - IEX_TOKEN=${IEX_TOKEN}
      - IEX_API_VERSION=${IEX_API_VERSION}
    ports:
      - 5000:5000
    restart: always
    depends_on:
      - db

  db:
    image: postgres:12-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: always
    ports:
      - 5432:5432

volumes:
  postgres_data:
